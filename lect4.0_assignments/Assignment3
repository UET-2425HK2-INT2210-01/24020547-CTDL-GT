#include <iostream>

using namespace std;

bool check(char x, char y) {
    if (x == '(' && y == ')') {
        return 1;
    }
    else if (x + 2 == y) {
        return 1;
    }
    return 0;
}

class node {
public:
    char data;
    node* next;
    node* prev;
    node(char value) {
        data = value;
        next = nullptr;
        prev = nullptr;
    }
};

class stack {
public:
    node* head;
    node* tail;
    int size = 0;
    linkedlist() {
        head = nullptr;
        tail = nullptr;
    }
    void insert(char x, int &si) {
        node* newnode = new node(x);
        if (head == nullptr) {
            head = newnode;
            tail = newnode;
        }
        else {
            tail->next = newnode;
            newnode->prev = tail;
            tail = newnode;
        }
        ++size;
        si = size;
    }
    void del() {
        node* tmp = tail;
        if (tail == nullptr) {
            return;
        }
        tail = tail->prev;
        if (tail != nullptr) {
            tail->next = nullptr;
        }
        else {
            head = nullptr;
        }
        delete tmp;
        --size;
    }
    bool ans(char x, int &si) {
        node* tmp = tail;
        if (size == 0) {
            return 0;
        }
        if (!check(tail->data, x)) {
            return 0;
        }
        else {
            del();
            --si;
            return 1;
        }
    }
};

int main()
{
    while (1) {
        string s;
        stack l;
        int size = 0, count = 0;
        cin >> s;
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == '(' || s[i] == '{' || s[i] == '[') {
                l.insert(s[i], size);
            }
            else {
                if (!l.ans(s[i], size)) {
                    cout << "Invalid\n";
                    ++count;
                    break;
                }
            }
        }
        if (count == 0) {
            if (size != 0) {
                cout << "Invalid\n";
            }
            else {
                cout << "Valid\n";
            }
        }
    }
}
